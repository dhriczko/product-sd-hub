---

## EDC endpoints exposed by the control-plane
edc:
  endpoints:
    ## Default api exposing health checks etc
    default:
      # -- The network port, which the "default" api is going to be exposed by the container, pod and service
      port: "8080"
      # -- The path mapping the "default" api is going to be exposed at
      path: /api
    ## Data management API
    data:
      # -- The network port, which the "data" management api is going to be exposed by the container, pod and service
      port: "8181"
      # -- The path mapping the "data" management api is going to be exposed at
      path: /data
    ## Validation API
    validation:
      # -- The network port, which the "validation" api is going to be exposed by the container, pod and service
      port: "8182"
      # -- The path mapping the "validation" api is going to be exposed at
      path: /validation
    ## Control API
    control:
      # -- The network port, which the "control" api is going to be exposed by the container, pod and service
      port: "9999"
      # -- The path mapping the "control" api is going to be exposed at
      path: /api/controlplane/control
    ## IDS endpoints
    ids:
      # -- The network port, which the "ids" multipart api is going to be exposed by the container, pod and service
      port: "8282"
      # -- The path mapping the "ids" multipart api is going to be exposed at
      path: /api/v1/ids
    ## Prometheus endpoint
    metrics:
      # -- The network port, which the prometheus metrics are going to be exposed by the container, pod and service
      port: "9090"
      # -- The path mapping the prometheus metrics are going to be exposed at
      path: /metrics


## Ingress declaration to expose the network service.
ingresses:
  ## Public / Internet facing Ingress
  - enabled: true
    # -- The hostname to be used to precisely map incoming traffic onto the underlying network service
    hostname: "edc-cp-prv-pen1.int.demo.catena-x.net"
    # -- Additional ingress annotations to add
    annotations:
      nginx.ingress.kubernetes.io/use-regex: "true"
    # -- EDC endpoints exposed by this ingress resource
    endpoints:
      - ids
      - default
      - data
      - control
    # -- Defines the [ingress class](https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-class)  to use
    className: "nginx"
    # -- Enables TLS on the ingress resource
    tls: false
    ## Adds [cert-manager](https://cert-manager.io/docs/) annotations to the ingress resource
    certManager:
      # -- If preset enables certificate generation via cert-manager namespace scoped issuer
      issuer: ""
      # -- If preset enables certificate generation via cert-manager cluster-wide issuer
      clusterIssuer: ""

  ## Private / Intranet facing Ingress
  - enabled: false
    # -- The hostname to be used to precisely map incoming traffic onto the underlying network service
    hostname: "edc-controlplane.intranet"
    # -- Additional ingress annotations to add
    annotations: {}
    # -- EDC endpoints exposed by this ingress resource
    endpoints:
      - data
      - control
    # -- Defines the [ingress class](https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-class)  to use
    className: ""
    # -- Enables TLS on the ingress resource
    tls: false
    ## Adds [cert-manager](https://cert-manager.io/docs/) annotations to the ingress resource
    certManager:
      # -- If preset enables certificate generation via cert-manager namespace scoped issuer
      issuer: ""
      # -- If preset enables certificate generation via cert-manager cluster-wide issuer
      clusterIssuer: ""

# -- [Resource management](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/) applied to the deployed pod
resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi


postgresql:
  enabled: true
  auth:
    username: "edcUser"
    database: "edcdb"
    existingSecret: db-secrets
    secretKeys:
        adminPasswordKey: "postgres-password"
        userPasswordKey: "password"
        

logging:
  # -- EDC logging.properties configuring the [java.util.logging subsystem](https://docs.oracle.com/javase/7/docs/technotes/guides/logging/overview.html#a1.8)
  properties: |-
    .level=INFO
    org.eclipse.dataspaceconnector.level=ALL
    handlers=java.util.logging.ConsoleHandler
    java.util.logging.ConsoleHandler.formatter=java.util.logging.SimpleFormatter
    java.util.logging.ConsoleHandler.level=ALL
    java.util.logging.SimpleFormatter.format=[%1$tY-%1$tm-%1$td %1$tH:%1$tM:%1$tS] [%4$-7s] %5$s%6$s%n

opentelemetry:
  # -- opentelemetry.properties configuring the [opentelemetry agent](https://opentelemetry.io/docs/instrumentation/java/automatic/agent-config/)
  properties: |-
    otel.javaagent.enabled=false
    otel.javaagent.debug=false

configuration:
  # -- EDC configuration.properties configuring aspects of the [eclipse-dataspaceconnector](https://github.com/eclipse-dataspaceconnector/DataSpaceConnector)
  properties: |-
    edc.api.auth.key=password
    edc.api.control.auth.apikey.key=X-Api-Key
    edc.api.control.auth.apikey.value=password
    edc.ids.catalog.id=urn:catalog:default
    edc.hostname=edc-cp-prv-pen.int.demo.catena-x.net
    # edc.ids.curator=http://20.113.137.169
    edc.ids.description=Eclipse Dataspace Connector
    # edc.ids.endpoint=http://20.113.137.169:8282/api/v1/ids
    edc.ids.id=urn:connector:edc
    # edc.ids.maintainer=http://20.113.137.169
    edc.ids.security.profile=base
    edc.ids.title=Eclipse Dataspace Connector
    ids.webhook.address=http://edc-cp-prv-pen.int.demo.catena-x.net/ids
    # DAPS Properties
    edc.oauth.client.id=60:F5:14:3C:7E:4D:7F:12:7D:8C:10:0A:7D:40:FF:C3:BB:97:FB:29:keyid:60:F5:14:3C:7E:4D:7F:12:7D:8C:10:0A:7D:40:FF:C3:BB:97:FB:29
    edc.oauth.provider.audience=idsc:IDS_CONNECTORS_ALL
    edc.oauth.provider.jwks.url=https://daps-pen.int.demo.catena-x.net/.well-known/jwks.json
    edc.oauth.token.url=https://daps-pen.int.demo.catena-x.net/token
    # OAUTH Properties
    edc.oauth.public.key.alias=edc-cp-provider-pen-crt
    edc.oauth.private.key.alias=edc-cp-provider-pen-key
    edc.transfer.dataplane.sync.endpoint=http://edc-dp-prv-pen.int.demo.catena-x.net/public
    edc.transfer.proxy.endpoint=http://edc-dp-prv-pen.int.demo.catena-x.net/public
    edc.transfer.proxy.token.verifier.publickey.alias=pen-data-plane-public-key
    edc.transfer.proxy.token.signer.privatekey.alias=pen-data-plane-private-key
    edc.public.key.alias=pen-data-plane-public-key
    edc.vault.hashicorp.url=
    edc.vault.hashicorp.token=
    edc.vault.hashicorp.timeout.seconds=30
    edc.vault.hashicorp.api.secret.path=/v1/essential-services/data
    edc.vault.hashicorp.health.check.standby.ok=true
    edc.receiver.http.endpoint=http://192.168.1.45:10092/edc-backend/api/v1/public
    # Azure vault related configuration
    #edc.vault.clientid=fbedd445-6aa2-48cb-a855-0f62a28f923c
    #edc.vault.clientsecret=K65PAD3xzGUECJ2ybo6C_pjAVIUd4H.M~p
    #edc.vault.name=edc1vault hvs.Xm008gacVljiT7aLLJK0bJpO
    #edc.vault.tenantid=495463c3-0991-4659-9cc5-94b4a3f7b1d6
    #  Postgresql related configuration
    edc.datasource.asset.name=asset
    edc.datasource.asset.url=
    #edc.datasource.asset.user=
    #edc.datasource.asset.password=
    edc.datasource.contractdefinition.name=contractdefinition
    edc.datasource.contractdefinition.url=
    #edc.datasource.contractdefinition.user=root
    #edc.datasource.contractdefinition.password=
    edc.datasource.contractnegotiation.name=contractnegotiation
    edc.datasource.contractnegotiation.url=
    #edc.datasource.contractnegotiation.user=root
    #edc.datasource.contractnegotiation.password=
    edc.datasource.policy.name=policy
    edc.datasource.policy.url=
    #edc.datasource.policy.user=root
    #edc.datasource.policy.password=
    edc.datasource.transferprocess.name=transferprocess
    edc.datasource.transferprocess.url=
    #edc.datasource.transferprocess.user=root
    #edc.datasource.transferprocess.password=

    # edc.api.auth.key=
    # edc.api.control.auth.apikey.key=
    # edc.api.control.auth.apikey.value=
    # edc.atomikos.checkpoint.interval=
    # edc.atomikos.directory=
    # edc.atomikos.logging=
    # edc.atomikos.threaded2pc=
    # edc.atomikos.timeout=
    # edc.aws.access.key=
    # edc.aws.provision.retry.retries.max=
    # edc.aws.provision.role.duration.session.max=
    # edc.aws.secret.access.key=
    # edc.blobstore.endpoint=
    # edc.controlplane.validation-endpoint=
    # edc.core.retry.backoff.max=
    # edc.core.retry.backoff.min=
    # edc.core.retry.retries.max=
    # edc.core.system.health.check.liveness-period=
    # edc.core.system.health.check.readiness-period=
    # edc.core.system.health.check.startup-period=
    # edc.core.system.health.check.threadpool-size=
    # edc.dataplane.queue.capacity=
    # edc.dataplane.wait=
    # edc.dataplane.workers=
    # edc.datasource.asset.name="default"
    # edc.datasource.contractdefinition.name="default"
    # edc.datasource.contractnegotiation.name="default"
    # edc.datasource.policy.name="default"
    # edc.datasource.transferprocess.name="default"
    # edc.datasource.default.pool.maxIdleConnections=
    # edc.datasource.default.pool.maxTotalConnections=
    # edc.datasource.default.pool.minIdleConnections=
    # edc.datasource.default.pool.testConnectionOnBorrow=
    # edc.datasource.default.pool.testConnectionOnCreate=
    # edc.datasource.default.pool.testConnectionOnReturn=
    # edc.datasource.default.pool.testConnectionWhileIdle=
    # edc.datasource.default.pool.testQuery=
    # edc.datasource.default.url=
    # edc.datasource.default.user=
    # edc.datasource.default.password=
    # edc.dpf.selector.url=
    # edc.events.topic.endpoint=
    # edc.events.topic.name=
    # edc.fs.config=
    # edc.hostname=
    # edc.identity.did.url=
    # edc.ids.catalog.id=
    # edc.ids.curator=
    # edc.ids.description=
    # edc.ids.endpoint=
    # edc.ids.id=
    # edc.ids.maintainer=
    # edc.ids.security.profile=
    # edc.ids.title=
    # edc.ids.validation.referringconnector=
    # edc.ion.crawler.did-type=
    # edc.ion.crawler.interval-minutes=
    # edc.ion.crawler.ion.url=
    # edc.metrics.enabled=
    # edc.metrics.executor.enabled=
    # edc.metrics.jersey.enabled=
    # edc.metrics.jetty.enabled=
    # edc.metrics.okhttp.enabled=
    # edc.metrics.system.enabled=
    # edc.negotiation.consumer.state-machine.batch-size=
    # edc.negotiation.provider.state-machine.batch-size=
    # edc.oauth.client.id=
    # edc.oauth.private.key.alias=
    # edc.oauth.provider.audience=
    # edc.oauth.provider.jwks.refresh=
    # edc.oauth.provider.jwks.url=
    # edc.oauth.public.key.alias=
    # edc.oauth.token.url=
    # edc.oauth.validation.nbf.leeway=
    # edc.receiver.http.auth-code=
    # edc.receiver.http.auth-key=
    # edc.transfer.proxy.endpoint=
    # edc.transfer.dataplane.sync.token.validity=
    # edc.transfer.proxy.token.signer.privatekey.alias=
    # edc.transfer.functions.check.endpoint=
    # edc.transfer.functions.enabled.protocols=
    # edc.transfer.functions.transfer.endpoint=
    # edc.transfer-process-store.database.name=
    # edc.transfer.state-machine.batch-size=
    # edc.vault=
    # edc.vault.certificate=
    # edc.vault.clientid=
    # edc.vault.clientsecret=
    # edc.vault.name=
    # edc.vault.tenantid=
    # edc.vault.hashicorp.url=
    # edc.vault.hashicorp.token=
    # edc.vault.hashicorp.timeout.seconds=
    # edc.webdid.doh.url=
    # edc.web.rest.cors.enabled=
    # edc.web.rest.cors.headers=
    # edc.web.rest.cors.methods=
    # edc.web.rest.cors.origins=

